library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- Import the decode function
library work;
use work.pkg_7seg.all;

entity e_7seg_display is
  generic (
    CLK_FREQ_HZ : integer := 50_000_000;
    CHAR_TIME_MS : integer := 500  -- Show each letter for 500ms, e.g.
  );
  port (
    clk          : in  std_logic;
    reset        : in  std_logic;
    display_mode : in  std_logic_vector(2 downto 0);
    -- ^ you could also use an enumerated type or more bits
    seg_out      : out std_logic_vector(6*6 - 1 downto 0)  -- 6 digits x 7 bits
    -- seg_out(6 downto 0) = digit0, seg_out(13 downto 7) = digit1, ...
  );
end entity e_7seg_display;
architecture a_7seg_display of e_7seg_display is

  ----------------------------------------------------------------------------
  -- Example: each "display_mode" index -> a string of characters
  ----------------------------------------------------------------------------
  type t_message_array is array (0 to 4) of string(1 to 8);
  -- max length 8 for demonstration; enlarge as needed
  constant MSG_TABLE : t_message_array := (
    0 => "SELECT  ",  
    1 => "WwRITE   ",
    2 => "READ    ",
    3 => "SMmOOT  ",  
    4 => "CMmPLT "   
  );

  ----------------------------------------------------------------------------
  -- Internal signals
  ----------------------------------------------------------------------------
  signal char_index : integer range 0 to 7 := 0;
  signal current_char : character := ' ';

  -- For timing: how many clock cycles to wait for each character
  constant MS_COUNT : integer := CLK_FREQ_HZ / 1000; 
    -- # of clk ticks in 1ms
  constant CHAR_TICKS : integer := MS_COUNT * CHAR_TIME_MS;  
    -- total # of clk ticks for one character

  signal tick_count : integer range 0 to CHAR_TICKS := 0;

  ----------------------------------------------------------------------------
  -- Convert the current char into a 7-seg pattern
  ----------------------------------------------------------------------------
  function replicate_6x(seg: std_logic_vector(6 downto 0)) 
    return std_logic_vector(6*6 - 1 downto 0) is
    variable tmp : std_logic_vector(6*6 - 1 downto 0);
  begin
    -- Copy the same 7 bits into each 7-bit chunk
    for i in 0 to 5 loop
      tmp((i+1)*7-1 downto i*7) := seg;
    end loop;
    return tmp;
  end function;

  ----------------------------------------------------------------------------
begin

  ----------------------------------------------------------------------------
  -- Process to cycle through the letters
  ----------------------------------------------------------------------------
  process(clk, reset)
    variable message_index : integer := 0;  -- which of MSG_TABLE?
    variable seg_code      : std_logic_vector(6 downto 0);
  begin
    if rising_edge(clk) then
      if reset = '1' then
        tick_count   <= 0;
        char_index   <= 0;
        current_char <= ' ';
        seg_out      <= replicate_6x("1111111"); -- blank
      else

        -- 1) Determine which message weâ€™re displaying
        --    Convert display_mode from std_logic_vector to integer for indexing
        --    Or you can do a case statement on display_mode
        message_index := to_integer(unsigned(display_mode));

        -- 2) Time-based cycling of letters
        if tick_count < CHAR_TICKS then
          tick_count <= tick_count + 1;
        else
          tick_count <= 0;
          -- Move on to next character in the selected message
          if char_index < 7 then
            char_index <= char_index + 1;
          else
            char_index <= 0;  -- loop around
          end if;
        end if;

        -- 3) Grab the current character from the message table
        current_char <= MSG_TABLE(message_index)(char_index+1);

        -- 4) Convert that character to 7-seg, replicate across all 6 digits
        seg_code := char_to_7seg(current_char);
        seg_out  <= replicate_6x(seg_code);

      end if;
    end if;
  end process;

end architecture a_7seg_display;
